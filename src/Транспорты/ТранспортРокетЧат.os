
///////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль транспорта отправки сообщений rocketchat
//
///////////////////////////////////////////////////////////////////////////////////////////////

Перем ПараметрыАвторизации;	// хранит структуру авторизации
Перем ОписаниеПротокола;	// хранит структуру описания протокола

///////////////////////////////////////////////////////////////////////////////////////////////
// Стандартный интерфейс
///////////////////////////////////////////////////////////////////////////////////////////////

// Протокол
//	Метод возвращает описание используемого протокола
//
// Возвращаемое значение:
//	Структура - Описание протокола
//		{
//			Имя 			- Строка - Системное имя транспорта
//			Представление 	- Строка - пользовательское представление транспорта
//			Описание		- Строка - Строковое описание транспорта
//			Операторы		- Структура - Возможные операторы транспорта
//		}
//
Функция Протокол() Экспорт
	
	Если ОписаниеПротокола = Неопределено Тогда

		ОписаниеПротокола = Новый Структура("Имя, Представление, Описание, Операторы", "rocketchat", "rocketchat", "Отправка сообщений в каналы и пользователям RocketChat", Неопределено);

	КонецЕсли;

	Возврат ОписаниеПротокола;

КонецФункции // Протокол()

// Инициализация
//	Инициализация параметров транспорта
//
// Параметры:
//  ПараметрыИнициализации - Структура - набор параметров инициализации
//
Процедура Инициализация(ПараметрыИнициализации) Экспорт
	
	Если ПараметрыИнициализации = Неопределено Тогда

		Сообщить(СтрШаблон("Для инициализации транспорта %1 необходимо передавать в параметрах: ", Протокол().Представление));
		Сообщить(" - Логин");
		Сообщить(" - Пароль");
		Сообщить(" - АдресСервера");
		
		ВызватьИсключение СтрШаблон("Инициализация транспорта %1 невыполнена", Протокол().Представление);

	КонецЕсли;
	
	ПараметрыАвторизации = Новый Структура("АдресСервера, Логин, Пароль", 
								ПараметрыИнициализации.АдресСервера,
								ПараметрыИнициализации.Логин,
								ПараметрыИнициализации.Пароль);
	
КонецПроцедуры // Инициализация()

// ОтправитьСообщение
//	Метод отправки сообщения
//
// Параметры:
//	Адресат					- Строка	- Адресат сообщения
//	Сообщение				- Строка	- Текст отправляемого сообщения
//	ДополнительныеПараметры	- Структура	- Набор дополнительных параметров
//
Процедура ОтправитьСообщение(Адресат, Сообщение, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ПараметрыАвторизации = Неопределено Тогда

		ВызватьИсключение СтрШаблон("Для отправки сообщения необходимо выполнить инициализацию транспорта %1", Протокол().Представление);

	КонецЕсли;

	Прокси = Новый ИнтернетПрокси(ИСТИНА);
	
	// сначала авторизация
	URL = "api/v1/login";
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = URL;
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрШаблон("{""user"":""%1"", ""password"":""%2""}", ПараметрыАвторизации.Логин, ПараметрыАвторизации.Пароль));
	HTTP = Новый HTTPСоединение(ПараметрыАвторизации.АдресСервера,,,, Прокси);
	ОтветHTTP = HTTP.ОтправитьДляОбработки(HTTPЗапрос);

	Если ОтветHTTP.КодСостояния = 200 Тогда

		json = Новый ПарсерJSON();
		ОтветJson = json.ПрочитатьJSON(ОтветHTTP.ПолучитьТелоКакСтроку());
		Если ОтветJson.Получить("status") = "success" Тогда

			Токен = ОтветJson.Получить("data").Получить("authToken");
			ИД = ОтветJson.Получить("data").Получить("userId");

			// отправка сообщения
			URL = "api/v1/chat.postMessage";

			Заголовки = Новый Соответствие;
			Заголовки.Вставить("Content-Type", "application/json");
			Заголовки.Вставить("Accept", "application/json");
			Заголовки.Вставить("X-Auth-Token", Токен);
			Заголовки.Вставить("X-User-Id", ИД);

			ОписаниеСообщения = Новый Структура;
			ОписаниеСообщения.Вставить("channel", Адресат);
			ОписаниеСообщения.Вставить("text", Сообщение);
			ОписаниеСообщения.Вставить("emoji", ПолучитьИконкуТипаСообщения(ДополнительныеПараметры.ТипСообщения));
			HTTPЗапрос = Новый HTTPЗапрос(URL, Заголовки);
			HTTPЗапрос.УстановитьТелоИзСтроки(json.ЗаписатьJSON(ОписаниеСообщения));
			HTTP = Новый HTTPСоединение(ПараметрыАвторизации.АдресСервера,,,, Прокси);
			ОтветHTTP = HTTP.ОтправитьДляОбработки(HTTPЗапрос);
			Сообщить(ОтветHTTP.ПолучитьТелоКакСтроку());

		Иначе
			
			ВызватьИсключение "Ошибка авторизации";	

		КонецЕсли; 

	 Иначе

		ВызватьИсключение "Ошибка выполнения команды: " + ОтветHTTP.ПолучитьТелоКакСтроку();

	КонецЕсли;
	
КонецПроцедуры // ОтправитьСообщение()

///////////////////////////////////////////////////////////////////////////////////////////////
// Методы реализации
///////////////////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьИконкуТипаСообщения(ТипСообщения)
	
	Иконка = ТипСообщения;
	Если ТипСообщения = "Ошибка" Тогда
			
		Иконка = ":no_entry:";
			
	ИначеЕсли ТипСообщения = "Информация" Тогда
			
		Иконка = ":speech_balloon:";
			
	ИначеЕсли ТипСообщения = "Предупреждение" Тогда
		
		Иконка = ":warning:";  
		
	КонецЕсли;
		
	Возврат Иконка;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////

ПараметрыАвторизации = Неопределено;
