
///////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль транспорта отправки сообщений gitter
//
///////////////////////////////////////////////////////////////////////////////////////////////

Перем ПараметрыАвторизации;	// хранит структуру авторизации
Перем ОписаниеПротокола;	// хранит структуру описания протокола

///////////////////////////////////////////////////////////////////////////////////////////////
// Стандартный интерфейс
///////////////////////////////////////////////////////////////////////////////////////////////

// Протокол
//	Метод возвращает описание используемого протокола
//
// Возвращаемое значение:
//	Структура - Описание протокола
//		{
//			Имя 			- Строка - Системное имя транспорта
//			Представление 	- Строка - пользовательское представление транспорта
//			Описание		- Строка - Строковое описание транспорта
//			Операторы		- Структура - Возможные операторы транспорта
//		}
//
Функция Протокол() Экспорт
	
	Если ОписаниеПротокола = Неопределено Тогда

		ОписаниеПротокола = Новый Структура("Имя, Представление, Описание, Операторы", "gitter", "gitter", "Отправка сообщений в комнаты gitter", Неопределено);

	КонецЕсли;

	Возврат ОписаниеПротокола;

КонецФункции // Протокол()

// Инициализация
//	Инициализация параметров транспорта
//
// Параметры:
//  ПараметрыИнициализации - Структура - набор параметров инициализации
//
Процедура Инициализация(ПараметрыИнициализации) Экспорт
	
	Если ПараметрыИнициализации = Неопределено Тогда

		Сообщить(СтрШаблон("Для инициализации транспорта %1 необходимо передавать в параметрах: ", Протокол().Представление));
		Сообщить(" - Логин");
		
		ВызватьИсключение СтрШаблон("Инициализация транспорта %1 невыполнена", Протокол().Представление);

	КонецЕсли;
	
	Комнаты = ПолучитьСписокКомнат(ПараметрыИнициализации.Логин);
	ПараметрыАвторизации = Новый Структура("Токен, Комнаты", ПараметрыИнициализации.Логин, Комнаты);

КонецПроцедуры // Инициализация()

// ОтправитьСообщение
//	Метод отправки сообщения
//
// Параметры:
//	Адресат					- Строка	- Адресат сообщения
//	Сообщение				- Строка	- Текст отправляемого сообщения
//	ДополнительныеПараметры	- Структура	- Набор дополнительных параметров
//
Процедура ОтправитьСообщение(Адресат, Сообщение, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ПараметрыАвторизации = Неопределено Тогда

		ВызватьИсключение СтрШаблон("Для отправки сообщения необходимо выполнить инициализацию транспорта %1", Протокол().Представление);

	КонецЕсли;

	ИмяСервера = "https://api.gitter.im";
	URL = СтрШаблон("/v1/rooms/%1/chatMessages", Адресат);

	Прокси = Новый ИнтернетПрокси(Истина);

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Accept", "application/json");
	Заголовки.Вставить("Authorization", " Bearer " + ПараметрыАвторизации.Токен);

	HTTPЗапрос = Новый HTTPЗапрос(URL, Заголовки);

	ТекстСообщения = СтрЗаменить(Сообщение, Символы.ПС, "\n");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, Символы.ВК, "\r");
	
	ТелоЗапроса = СтрШаблон("{""text"":""%1""}", ТекстСообщения);

	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);

	HTTP = Новый HTTPСоединение(ИмяСервера);
	ОтветHTTP = HTTP.ОтправитьДляОбработки(HTTPЗапрос);
	
КонецПроцедуры // ОтправитьСообщение()

///////////////////////////////////////////////////////////////////////////////////////////////
// Методы реализации
///////////////////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьСписокКомнат(Токен)
	
	СписокКомнат = Новый Соответствие();
	
	ИмяСервера = "https://api.gitter.im";
	URL = "v1/rooms?access_token="  + Токен ;

	Прокси = Новый ИнтернетПрокси(ИСТИНА);
		
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = URL;
		
	HTTP = Новый HTTPСоединение(ИмяСервера);
	Ответ = HTTP.Получить(HTTPЗапрос);
			
	json = Новый ПарсерJSON();
	UnJason = json.ПрочитатьJSON(Ответ.ПолучитьТелоКакСтроку());
		
	Если Ответ.КодСостояния = 200 И ТипЗнч(UnJason) = Тип("Массив") Тогда
			
		Для Каждого Комната Из UnJason Цикл
		
			СписокКомнат.Вставить(Комната.Получить("name"), Комната.Получить("id"));
		
		КонецЦикла;
	
	ИначеЕсли ТипЗнч(UnJason) = Тип("Соответствие") И UnJason["error"] = "Unauthorized" Тогда
		
		ВызватьИсключение "Ошибка авторизации";	
	
	Иначе
	
		ВызватьИсключение "Ошибка получения списка комнат";	
	
	КонецЕсли;
	
	Возврат СписокКомнат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////

ПараметрыАвторизации = Неопределено;
