
///////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль транспорта отправки сообщений telegram
//
///////////////////////////////////////////////////////////////////////////////////////////////

Перем ПараметрыАвторизации;	// хранит структуру авторизации
Перем ОписаниеПротокола;	// хранит структуру описания протокола

///////////////////////////////////////////////////////////////////////////////////////////////
// Стандартный интерфейс
///////////////////////////////////////////////////////////////////////////////////////////////

// Протокол
//	Метод возвращает описание используемого протокола
//
// Возвращаемое значение:
//	Структура - Описание протокола
//		{
//			Имя 			- Строка - Системное имя транспорта
//			Представление 	- Строка - пользовательское представление транспорта
//			Описание		- Строка - Строковое описание транспорта
//			Операторы		- Структура - Возможные операторы транспорта
//		}
//
Функция Протокол() Экспорт
	
	Если ОписаниеПротокола = Неопределено Тогда
		
		ОписаниеПротокола = Новый Структура("Имя, Представление, Описание, Операторы", "telegram", "telegram", "Отправка сообщений в каналы telegram", Неопределено);
		
	КонецЕсли;
	
	Возврат ОписаниеПротокола;
	
КонецФункции // Протокол()

// Инициализация
//	Инициализация параметров транспорта
//
// Параметры:
//  ПараметрыИнициализации - Структура - набор параметров инициализации
//
Процедура Инициализация(ПараметрыИнициализации) Экспорт
	
	Если ПараметрыИнициализации = Неопределено Тогда
		
		Сообщить(СтрШаблон("Для инициализации транспорта %1 необходимо передавать в параметрах: ", Протокол().Представление));
		Сообщить(" - Логин");
		
		ВызватьИсключение СтрШаблон("Инициализация транспорта %1 невыполнена", Протокол().Представление);
		
	КонецЕсли;
	
	ПараметрыАвторизации = Новый Структура("Токен", ПараметрыИнициализации.Логин);
	
КонецПроцедуры // Инициализация()

// ОтправитьСообщение
//	Метод отправки сообщения
//
// Параметры:
//	Адресат					- Строка	- Адресат сообщения
//	Сообщение				- Строка	- Текст отправляемого сообщения
//	ДополнительныеПараметры	- Структура	- Набор дополнительных параметров
//
Процедура ОтправитьСообщение(Адресат, Сообщение, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ПараметрыАвторизации = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон("Для отправки сообщения необходимо выполнить инициализацию транспорта %1", Протокол().Представление);
		
	КонецЕсли;
	
	// При отпралке сообщений с parse_mode HTML, Markdown или MarkdownV2
	// необходимо дополнительно экранировать сообщение
	// детали экранирования описаны https://core.telegram.org/bots/api#formatting-options
	ТекстСообщения = СтрЗаменить(Сообщение, Символы.ПС, "%0A");

	ПараметрыСообщения = Новый Структура("chat_id, text", Адресат, ТекстСообщения);

	ОпределитьТипСообщения(ДополнительныеПараметры, ПараметрыСообщения);
	ЗаполнитьДоступныеПараметры(ДополнительныеПараметры, ПараметрыСообщения);

	Попытка
		ОтветHTTP = ВызватьМетодTelegramAPI("sendMessage", ПараметрыСообщения);
		Если ОтветHTTP.КодСостояния <> 200 Тогда
			ОтправкаВСлучаеОшибок(ПараметрыСообщения);
		КонецЕсли;
	Исключение  
		ОтправкаВСлучаеОшибок(ПараметрыСообщения);
	КонецПопытки;

КонецПроцедуры // ОтправитьСообщение()

Процедура ОтправкаВСлучаеОшибок(ПараметрыСообщения)

	КодСостоянияСоединения = 301;
	КоличествоПопытокПодключения = 0;

	Пока ((КодСостоянияСоединения > 300) И (КоличествоПопытокПодключения < 25)) Цикл	
		Попытка
			Прокси                       = СоздатьДинамическийПрокси(КоличествоПопытокПодключения);	
			ОтветHTTP                    = ВызватьМетодTelegramAPI("sendMessage", ПараметрыСообщения, Прокси);
			КодСостоянияСоединения       = ОтветHTTP.КодСостояния;
			КоличествоПопытокПодключения = КоличествоПопытокПодключения + 1;
		Исключение
			Приостановить(2);
			КоличествоПопытокПодключения = КоличествоПопытокПодключения + 1;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////
// Методы реализации
///////////////////////////////////////////////////////////////////////////////////////////////
Функция ВызватьМетодTelegramAPI(ИмяМетода, Параметры, Прокси = Неопределено)
	
	СтрокаПараметров = "";
	Для Каждого Параметр Из Параметры Цикл
		
		Шаблон = "%1=%2&";
		СтрокаПараметров = СтрокаПараметров + СтрШаблон(Шаблон, Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;	
	
	ИмяСервера = "https://api.telegram.org";
	
	URL = "/bot"
	+ ПараметрыАвторизации.Токен
	+ "/" + ИмяМетода
	+ "?" + СтрокаПараметров;
	
	HTTPЗапрос = Новый HTTPЗапрос(URL);
	HTTP = Новый HTTPСоединение(ИмяСервера,443,,,Прокси,3);
	ОтветHTTP = HTTP.ОтправитьДляОбработки(HTTPЗапрос);
	
	Возврат ОтветHTTP;
	
КонецФункции

Функция СоздатьДинамическийПрокси(НомерПопытки)
	ИмяСервера = "https://www.proxy-list.download";
	URL = "api/v1/get?type=https&anon=transparent&country=NL";

	HTTPЗапрос = Новый HTTPЗапрос(URL);
	HTTP = Новый HTTPСоединение(ИмяСервера);
	ОтветHTTP = HTTP.Получить(HTTPЗапрос);
	Ответ = ОтветHTTP.ПолучитьТелоКакСтроку();

	МассивСтрок = Новый Массив();
	Для Н = 1 По СтрЧислоСтрок(Ответ) Цикл
		Строка = СтрЗаменить(СтрПолучитьСтроку(Ответ, Н), Символы.ВК, "");
		МассивСтрок.Добавить(СтрРазделить(Строка, ":"));
	КонецЦикла;

	ProxyIP = МассивСтрок[НомерПопытки][0];
	ProxyPort = Число(МассивСтрок[НомерПопытки][1]);
	Прокси = Новый ИнтернетПрокси(Ложь);
	Прокси.Установить("https", ProxyIP, ProxyPort, "", "", Ложь);
	Возврат Прокси;

КонецФункции


Процедура ОпределитьТипСообщения(ДополнительныеПараметры, ПараметрыСообщения)
	Если ДополнительныеПараметры <> Неопределено 
		И
		ДополнительныеПараметры.Свойство("ТипСообщения") Тогда
		ТипСообщения = НРег(ДополнительныеПараметры.ТипСообщения);
		Если ТипСообщения = "html" Тогда
			ПараметрыСообщения.Вставить("parse_mode", "HTML");
		ИначеЕсли ТипСообщения = "markdown" или ТипСообщения = "md" Тогда
			ПараметрыСообщения.Вставить("parse_mode", "Markdown");
		ИначеЕсли ТипСообщения = "markdown2" или ТипСообщения = "md2" Тогда
			ПараметрыСообщения.Вставить("parse_mode", "MarkdownV2");
		Иначе
			Если ЗначениеЗаполнено(ТипСообщения) Тогда
				Сообщение = СтрШаблон("Передан неподдерживаемый тип сообщения %1", ТипСообщения);
				Сообщить(Сообщение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


// ЗаполнитьДоступныеПараметры
//	Метод заполнения ддоступных параметров отправки сообщения
//  Описаны по ссылке https://core.telegram.org/bots/api#sendmessage
//
// Параметры:
//	ДополнительныеПараметры	- Структура	- Набор дополнительных параметров
//  ПараметрыСообщения      - Структура - Набор параметров сообщения
//
Процедура ЗаполнитьДоступныеПараметры(ДополнительныеПараметры, ПараметрыСообщения)
	
	Если НЕ ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Отключает предварительный просмотр ссылок в этом сообщении
	Если ДополнительныеПараметры.Свойство("ОтключитьПрепросмотр") Тогда		
		ПараметрыСообщения.Вставить("disable_web_page_preview", 
									ВернутьПеревод(ДополнительныеПараметры.ОтключитьПрепросмотр));
	КонецЕсли;

	// Отправляет сообщение молча. Пользователи получат уведомление без звука.
	Если ДополнительныеПараметры.Свойство("ОтключитьУведомление") Тогда
		ПараметрыСообщения.Вставить("disable_notification", 
									ВернутьПеревод(ДополнительныеПараметры.ОтключитьУведомление));
	КонецЕсли;

	// Защищает содержимое отправленного сообщения от пересылки и сохранения
	Если ДополнительныеПараметры.Свойство("ЗащищенныйКонтент") Тогда
		ПараметрыСообщения.Вставить("protect_content", 
									ВернутьПеревод(ДополнительныеПараметры.ЗащищенныйКонтент));
	КонецЕсли;

	// Если сообщение является ответом, ID исходного сообщения
	Если ДополнительныеПараметры.Свойство("СообщениеОснование") Тогда
		ПараметрыСообщения.Вставить("reply_to_message_id", ДополнительныеПараметры.СообщениеОснование);
	КонецЕсли;

	// Установить true, если сообщение должно быть отправлено, даже если указанное в reply_to_message_id не найдено
	Если ДополнительныеПараметры.Свойство("РазрешитьОтправкуБезОснования") Тогда
		ПараметрыСообщения.Вставить("allow_sending_without_reply", 
									ВернутьПеревод(ДополнительныеПараметры.РазрешитьОтправкуБезОснования));
	КонецЕсли;

	// Сериализованный в формате JSON список специальных сущностей, 
	// которые появляются в тексте сообщения, который можно указать вместо parse_mode.
	// https://core.telegram.org/bots/api#messageentity
	Если ДополнительныеПараметры.Свойство("ДополнительныеСущности") Тогда
		ПараметрыСообщения.Вставить("entities", 
									ДополнительныеПараметры.ДополнительныеСущности);
	КонецЕсли;

	// Дополнительные возможности интерфейса. Сериализованный объект JSON 
	// для встроенной клавиатуры, настраиваемой клавиатуры для ответов, инструкций по 
	// удалению клавиатуры для ответов или принудительному ответу пользователя.
	// https://core.telegram.org/bots/api#inlinekeyboardmarkup
	// https://core.telegram.org/bots/api#replykeyboardmarkup
	// https://core.telegram.org/bots/api#replykeyboardremove
	// https://core.telegram.org/bots/api#forcereply
	Если ДополнительныеПараметры.Свойство("ПараметрыОтвета") Тогда
		ПараметрыСообщения.Вставить("reply_markup", 
									ДополнительныеПараметры.ПараметрыОтвета);
	КонецЕсли;	

КонецПроцедуры // ЗаполнитьДоступныеПараметры()


Функция ВернутьПеревод(ВходящееЗначение)
	Если ВходящееЗначение = Истина Тогда
		Возврат "true";
	ИначеЕсли ВходящееЗначение = Ложь Тогда		
		Возврат "false";
	Иначе
		Возврат "null";
	КонецЕсли;	
КонецФункции
///////////////////////////////////////////////////////////////////////////////////////////////

ПараметрыАвторизации = Неопределено;
